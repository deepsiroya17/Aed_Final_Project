/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.SystemAdminWorkArea;



import System.MedicalServiceCentralisationEcoSystem;


import System.Role.DeliveryAgencyAdminRole;
import System.Role.Role;

import CarrierAgency.DeliveryAgency;
import CarrierAgency.DeliveryAgencyDirectory;
import System.UserAccount;
import System.UserAccountDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author asus
 */
public class CarrierAgencyAccountsPage extends javax.swing.JPanel {

    /**
     * Creates new form OperationalAccountsPage
     */
    JPanel userProcessContainer;
    MedicalServiceCentralisationEcoSystem medicalServiceCentralisationEcoSystem;
    DeliveryAgencyDirectory deliveryAgencyDirectory;
    UserAccount userAccount;
    UserAccountDirectory UserAccountDirectory;

    public CarrierAgencyAccountsPage(JPanel userProcessContainer , MedicalServiceCentralisationEcoSystem medicalServiceCentralisationEcoSystem) {
        
        this.userProcessContainer = userProcessContainer;
        this.medicalServiceCentralisationEcoSystem = medicalServiceCentralisationEcoSystem;
        initComponents();
        if(medicalServiceCentralisationEcoSystem.getDeliveryAgencyDirectory()== null)
           medicalServiceCentralisationEcoSystem.setDeliveryAgencyDirectory(new DeliveryAgencyDirectory());
        

        addDefaultvalues();
        addrecordstotable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmployee = new javax.swing.JTable();
        jButtonCreate = new javax.swing.JButton();
        jTextFieldTeamName = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jLabelPassword = new javax.swing.JLabel();
        jTextFieldTeamPassword = new javax.swing.JTextField();
        jTextFieldTeamID = new javax.swing.JTextField();
        jLabelEmpID = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jLabelEmpName = new javax.swing.JLabel();
        jButtonRefresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 70, 169));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Delivery Accounts");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 120, 810, -1));

        jButton2.setBackground(new java.awt.Color(255, 255, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("HOME");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 120, 110, 60));

        jTableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Delivery ID", "Delivery Name", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmployeeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmployee);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 460, 760, 170));

        jButtonCreate.setBackground(new java.awt.Color(255, 255, 204));
        jButtonCreate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonCreate.setText("CREATE");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });
        add(jButtonCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 380, 120, 60));
        add(jTextFieldTeamName, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 250, 351, -1));

        jButtonUpdate.setBackground(new java.awt.Color(255, 255, 204));
        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });
        add(jButtonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 380, 120, 60));

        jLabelPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelPassword.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPassword.setText("Password:");
        add(jLabelPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 300, 130, -1));
        add(jTextFieldTeamPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 300, 351, -1));
        add(jTextFieldTeamID, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 200, 351, -1));

        jLabelEmpID.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelEmpID.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEmpID.setText("Delivery ID:");
        add(jLabelEmpID, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 130, -1));

        jButtonDelete.setBackground(new java.awt.Color(255, 255, 204));
        jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        add(jButtonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 380, 120, 60));

        jLabelEmpName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelEmpName.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEmpName.setText("Delivery Name:");
        add(jLabelEmpName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, 140, -1));

        jButtonRefresh.setBackground(new java.awt.Color(255, 255, 204));
        jButtonRefresh.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonRefresh.setText("REFRESH");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });
        add(jButtonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, 120, 60));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/Images/DeliveryAgencyAccountsPage_1920x1183.jpeg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1920, 1200));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CardLayout crdLyt = (CardLayout) userProcessContainer.getLayout();
        crdLyt.show(userProcessContainer,"Sysadmin");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
       
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        ArrayList<String> user_input = check_empty_field();
        deliveryAgencyDirectory = medicalServiceCentralisationEcoSystem.getDeliveryAgencyDirectory();
        UserAccountDirectory usersList = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        if(!user_input.isEmpty()) {
            if(usersList.checkIfUserIsUnique(user_input.get(0))){
            userAccount = new UserAccount(user_input.get(0), user_input.get(2), new DeliveryAgencyAdminRole());            
            DeliveryAgency deliveryAgency = new DeliveryAgency(user_input.get(0), user_input.get(1));
            userAccount.setDeliveryAgency(deliveryAgency);
            deliveryAgencyDirectory.addDeliveryAgency(deliveryAgency);
            
            usersList.addUserAccount(userAccount);
            
            JOptionPane.showMessageDialog(this, "New DeliveryAgency Information has been added.");
            model.addRow(new Object[]{userAccount,user_input.get(1),user_input.get(2)});
            clearFields();
            }
            else{
                JOptionPane.showMessageDialog(this, "This username is not available. Please select a new one.");
            }
        }
        
    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        int selected_row_ix = jTableEmployee.getSelectedRow();

        if(selected_row_ix < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        UserAccount select_account_details = (UserAccount)model.getValueAt(selected_row_ix, 0);        
        UserAccountDirectory = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        deliveryAgencyDirectory = medicalServiceCentralisationEcoSystem.getDeliveryAgencyDirectory();
        ArrayList<UserAccount> userAccountList = UserAccountDirectory.getUserAccountList();
        for(UserAccount userAccount: userAccountList)
        {
            if(userAccount.getUsername().equals(select_account_details.getUsername()))
            {
                DeliveryAgency deliveryAgency = userAccount.getDeliveryAgency();
                ArrayList<String> user_input = check_empty_field();
                model.setValueAt(user_input.get(1), selected_row_ix, 1);
                model.setValueAt(user_input.get(2), selected_row_ix, 2);
                deliveryAgencyDirectory.updateDeliveryAgency(user_input, deliveryAgency);
                UserAccountDirectory.updateAccount(set_user_input_values(userAccount, user_input));
                break;
            }
        }
        
        JOptionPane.showMessageDialog(this, "Values updated");
        
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int selected_row_ix = jTableEmployee.getSelectedRow();

        if(selected_row_ix < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        UserAccount select_user_account_details = (UserAccount)model.getValueAt(selected_row_ix, 0);
        UserAccountDirectory = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        DeliveryAgency deliveryAgency = select_user_account_details.getDeliveryAgency();
        deliveryAgencyDirectory.deleteDeliveryAgency(deliveryAgency);
        UserAccountDirectory.deleteAccount(select_user_account_details);
        model.removeRow(selected_row_ix);
        addrecordstotable();
        clearFields();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTableEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmployeeMouseClicked
        
        jButtonCreate.setEnabled(false);
        int selected_row_ix = jTableEmployee.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        UserAccount select_user_account_details = (UserAccount)model.getValueAt(selected_row_ix, 0);
        jTextFieldTeamID.setEditable(false);
        jTextFieldTeamID.setText(select_user_account_details.getUsername());
        jTextFieldTeamName.setText(select_user_account_details.getDeliveryAgency().getDeliveryAgencyName());
        jTextFieldTeamPassword.setText(select_user_account_details.getPassword());
        
    }//GEN-LAST:event_jTableEmployeeMouseClicked

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        jButtonCreate.setEnabled(true);
        jTextFieldTeamID.setEditable(true);
        clearFields();
    }//GEN-LAST:event_jButtonRefreshActionPerformed
    
    private UserAccount set_user_input_values(UserAccount userAccount, ArrayList<String> user_input) {
        userAccount.getDeliveryAgency().setDeliveryAgencyName(user_input.get(1));
        userAccount.setPassword(user_input.get(2));
        return userAccount;
    }
    
    private void clearFields(){
        jTextFieldTeamID.setText("");
        jTextFieldTeamName.setText("");
        jTextFieldTeamPassword.setText("");
    }
    
    public ArrayList<String> check_empty_field(){
        ArrayList<String> user_input = new ArrayList<>();
        String user_emp_id = jTextFieldTeamID.getText();
        String user_emp_name = jTextFieldTeamName.getText();
        String user_password = jTextFieldTeamPassword.getText();

        
        if(user_emp_id.isEmpty()){
            JOptionPane.showMessageDialog(this, "User ID can't be left empty.");
        }
        else if(user_emp_name.isEmpty()){
            JOptionPane.showMessageDialog(this, "User Name can't be left empty.");
        }
        else if(user_password.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a Password.");
        } else {
            user_input.add(user_emp_id);
            user_input.add(user_emp_name);
            user_input.add(user_password);
        }
        
        return user_input;
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelEmpID;
    private javax.swing.JLabel jLabelEmpName;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmployee;
    private javax.swing.JTextField jTextFieldTeamID;
    private javax.swing.JTextField jTextFieldTeamName;
    private javax.swing.JTextField jTextFieldTeamPassword;
    // End of variables declaration//GEN-END:variables

    
    private void addrecordstotable() {
        UserAccountDirectory userAccountDirectory = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        ArrayList<UserAccount> usersList = userAccountDirectory.getUserAccountList();
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        model.setRowCount(0);
        for(UserAccount userAccount: usersList)
        {   
            if(userAccount.getRole().toString() == "DeliveryAgencyAdmin"){
                model.addRow(new Object[]{userAccount,userAccount.getDeliveryAgency().getDeliveryAgencyName(),userAccount.getPassword()});
            }
        }
        jTableEmployee.setModel(model);
    }

    private void addDefaultvalues() {
        
        UserAccountDirectory usersList = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        
        if (usersList.checkIfUserIsUnique("deliveryagency121")) {
         
            userAccount = new UserAccount("deliveryagency121", "pass",new DeliveryAgencyAdminRole());
            DeliveryAgency deliveryAgency = new DeliveryAgency("deliveryagency121","deliveryagency1");
            deliveryAgencyDirectory = medicalServiceCentralisationEcoSystem.getDeliveryAgencyDirectory();
            deliveryAgencyDirectory.addDeliveryAgency(deliveryAgency);
            userAccount.setDeliveryAgency(deliveryAgency);
                usersList.addUserAccount(userAccount);
        }
        
        if (usersList.checkIfUserIsUnique("deliveryagency122")) {
            userAccount = new UserAccount("deliveryagency122", "pass",new DeliveryAgencyAdminRole());
            DeliveryAgency deliveryAgency = new DeliveryAgency("deliveryagency122","deliveryagency2");
            deliveryAgencyDirectory.addDeliveryAgency(deliveryAgency);
            userAccount.setDeliveryAgency(deliveryAgency);
            usersList.addUserAccount(userAccount);

        }
        
    }
    
}
