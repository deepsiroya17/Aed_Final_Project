/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.HospitalManagement.AdministrativeWorkArea;


import HospitalManagement.Hospital.Hospital;
import HospitalManagement.Patient.PatientAppointment;
import HospitalManagement.Patient.PatientAppointmentDirectory;
import MainCentralisationSystem.MedicalServiceCentralisationEcoSystem;
import MainCentralisationSystem.UserAccount;
import userInterface.SystemAdminWorkArea.*;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author animeshgiri
 */
public class AdminstrativeReceptionistAppointment extends javax.swing.JPanel {

    /**
     * Creates new form OperationalAccountsPage
     */
    JPanel userProcessContainer;
    MedicalServiceCentralisationEcoSystem medicalServiceCentralisationEcoSystem;
    PatientAppointment patientAppointment;
    PatientAppointmentDirectory patientAppointmentDirectory;
    UserAccount userAccount;
    Hospital hospital;
    
    public AdminstrativeReceptionistAppointment(JPanel userProcessContainer , MedicalServiceCentralisationEcoSystem medicalServiceCentralisationEcoSystem, Hospital hospital) {
        this.userProcessContainer = userProcessContainer;
        this.medicalServiceCentralisationEcoSystem = medicalServiceCentralisationEcoSystem;     
        this.hospital = hospital;
        if(medicalServiceCentralisationEcoSystem.getPatientAppointmentDirectory() == null)
           medicalServiceCentralisationEcoSystem.setPatientAppointmentDirectory(new PatientAppointmentDirectory());
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAppointment = new javax.swing.JTable();
        jButtonCreate = new javax.swing.JButton();
        jTextFieldPatientName = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jButtonView = new javax.swing.JButton();
        jTextFieldPatientID = new javax.swing.JTextField();
        jLabelPatientID = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jLabelPatientName = new javax.swing.JLabel();
        jTextFieldDoctorName = new javax.swing.JTextField();
        jLabelAppointmentTime = new javax.swing.JLabel();
        jLabelDepartment = new javax.swing.JLabel();
        jComboBoxDepartment = new javax.swing.JComboBox<>();
        jLabelDoctorName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jDateAppointmentDate = new com.toedter.calendar.JDateChooser();
        jTextFieldAppointmentTime = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("APPOINTMENT MANAGEMENT");
        add(jLabelTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 50, 760, -1));

        jTableAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Doctor", "Department", "Appointment Date", "Appointment Time"
            }
        ));
        jScrollPane1.setViewportView(jTableAppointment);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 540, 787, 160));

        jButtonCreate.setText("CREATE");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });
        add(jButtonCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 470, -1, -1));
        add(jTextFieldPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, 140, -1));

        jButtonUpdate.setText("UPDATE");
        add(jButtonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 470, -1, -1));

        jButtonView.setText("VIEW");
        add(jButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 470, 70, -1));

        jTextFieldPatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPatientIDActionPerformed(evt);
            }
        });
        add(jTextFieldPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 198, 140, -1));

        jLabelPatientID.setText("Patient ID :");
        add(jLabelPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 70, 20));

        jButtonDelete.setText("DELETE");
        add(jButtonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 470, -1, -1));

        jLabelPatientName.setText("Patient Name :");
        add(jLabelPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, -1, 20));

        jTextFieldDoctorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDoctorNameActionPerformed(evt);
            }
        });
        add(jTextFieldDoctorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, 140, -1));

        jLabelAppointmentTime.setText("Appointment Date :");
        add(jLabelAppointmentTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 367, 120, 20));

        jLabelDepartment.setText("Department :");
        add(jLabelDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 320, 104, 20));

        jComboBoxDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cardiology", "Radiology", "Ayurvedic", "Dermetology", "Optometry", "Genral Surgery", "Plastic Surgeon ", "Obstetrics", "Orthopedics", "Psychiatry", "Neurosurgery", "Hematology", "Pedatrics", "Oncology", "Stomatology", "Opthalmology", "Virology", "Bio-Chemistry" }));
        add(jComboBoxDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, 140, -1));

        jLabelDoctorName.setText("Doctor Name :");
        add(jLabelDoctorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, 104, 20));

        jLabel1.setText("Appointment Time :");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 410, 130, 20));
        add(jDateAppointmentDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 360, 170, 30));
        add(jTextFieldAppointmentTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 410, 140, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldPatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPatientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPatientIDActionPerformed

    private void jTextFieldDoctorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDoctorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDoctorNameActionPerformed

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableAppointment.getModel();
        model.setRowCount(0);
        ArrayList<String> user_input = check_empty_field();
        PatientAppointmentDirectory patientAppointmentDirectory = medicalServiceCentralisationEcoSystem.getPatientAppointmentDirectory();
        ArrayList<PatientAppointment> patientAppointmentList = patientAppointmentDirectory.getPatientAppointmentList();
        
        Patient newPatient = new Patient();
        for(Patient patient: patientList){
            if(patient.getPatient_id().equals(user_input.get(0))){
                newPatient = patient;
                break;
            }
        }
//        String current_timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());

        newPatient.setPatient_id(user_input.get(0));
        newPatient.setPatient_name(user_input.get(1));
        newPatient.setPatient_email(user_input.get(5));
        PatientTest patientTest = new PatientTest();
        patientTest.setTest_date(user_input.get(4));
        patientTest.setReport_avalaible(report_avalibility);
        patientTest.setTest_id(user_input.get(2));
        patientTest.setLabTest(labTestDirectory.findLabTestByName(user_input.get(3)));
        
        ArrayList<PatientTest> patientTestList = newPatient.getPatientTestList();
//        HashMap<String, LabTest> patientLabTest = patientTest.getPatient_test_list();
//        
//        patientLabTest.put(user_input.get(2), labTestDirectory.findLabTestByName(user_input.get(3)));
        patientTestList.add(patientTest);
        newPatient.setPatientTestList(patientTestList);
        patientList.add(newPatient);
        patientDirectory.setPatientList(patientList);
        hospital.setPatientDirectory(patientDirectory);
        
        
        model.addRow(new Object[]{newPatient,newPatient.getPatient_name(),patientTest.getTest_id(), patientTest.getLabTest().getTest_name(),patientTest.getTest_date(),patientTest.getReport_avalaible()});
//        populateNewRequestsTable();
        populateTable();
        
        
        clearFields();
        
    }//GEN-LAST:event_jButtonCreateActionPerformed
    /*private Customer set_user_input_values(Customer customer, ArrayList<String> user_input){
        
        customer.getUserAccount().setPassword(user_input.get(1));
        customer.setCustomerPhone(user_input.get(2));
        return customer;
    }
        private void clearFields(){
        custUsername.setText("");
        custPassword.setText("");
        custContact.setText("");

    }
    public ArrayList<String> check_empty_field(){
        ArrayList<String> user_input = new ArrayList<>();
        String user_custName = custUsername.getText();
        String user_custPass = custPassword.getText();
        String user_contact = custContact.getText();
 
        if(user_custName.isEmpty()){
            JOptionPane.showMessageDialog(this, "Customer Name can't be left empty");
        }
        else if(user_custPass.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter password");
        }
        
        else if(user_contact.isEmpty()){
            JOptionPane.showMessageDialog(this, "Customer Contact No can't be left empty.");
        }
        user_input.add(user_custName);
        user_input.add(user_custPass);
        user_input.add(user_contact);
        
        return user_input;
        
    }
    
    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonView;
    private javax.swing.JComboBox<String> jComboBoxDepartment;
    private com.toedter.calendar.JDateChooser jDateAppointmentDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAppointmentTime;
    private javax.swing.JLabel jLabelDepartment;
    private javax.swing.JLabel jLabelDoctorName;
    private javax.swing.JLabel jLabelPatientID;
    private javax.swing.JLabel jLabelPatientName;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAppointment;
    private javax.swing.JTextField jTextFieldAppointmentTime;
    private javax.swing.JTextField jTextFieldDoctorName;
    private javax.swing.JTextField jTextFieldPatientID;
    private javax.swing.JTextField jTextFieldPatientName;
    // End of variables declaration//GEN-END:variables

    private void clearFields(){
            jTextFieldPatientID.setText("");
            jTextFieldPatientName.setText("");
            jTextFieldDoctorName.setText("");
            jComboBoxDepartment.setSelectedItem("");
            jTextFieldAppointmentTime.setText("");            
        }
    
    private ArrayList<String> check_empty_field() {
        
        ArrayList<String> user_input = new ArrayList<>();
        String user_patient_id = jTextFieldPatientID.getText();
        String user_patient_name = jTextFieldPatientName.getText();
        String user_patient_doctor = jTextFieldDoctorName.getText();
        String user_patient_department = (String) jComboBoxDepartment.getSelectedItem();
        Date date = jDateAppointmentDate.getDate();
        String user_patient_date = new SimpleDateFormat("MM.dd.yyyy").format(date);
        String user_patient_time = jTextFieldAppointmentTime.getText();
        
        if(user_patient_id.isEmpty()){
            JOptionPane.showMessageDialog(this, "Patient ID can't be left empty.");
        }
        else if(user_patient_name.isEmpty()){
            JOptionPane.showMessageDialog(this, "Patient Name can't be left empty.");
        }
        else if(user_patient_doctor.isEmpty()){
            JOptionPane.showMessageDialog(this, "Doctor Name can't be left empty");
        }

        else if(user_patient_department.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please choose a department.");
        }
        else if(user_patient_date.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a test date.");
        }
        else if(user_patient_time.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a test time.");
        }
        
        
        user_input.add(user_patient_id);
        user_input.add(user_patient_name);
        user_input.add(user_patient_doctor);
        user_input.add(user_patient_department);
        user_input.add(user_patient_date);
        user_input.add(user_patient_time);
        
        
        return user_input;
    }
    
    private void populateTable() {
        
        patientAppointmentDirectory = medicalServiceCentralisationEcoSystem.getPatientAppointmentDirectory();
        ArrayList<PatientAppointment> appointments = patientAppointmentDirectory.getPatientAppointmentList();
        DefaultTableModel model = (DefaultTableModel) jTableAppointment.getModel();
        model.setRowCount(0);
        
        for(PatientAppointment a: appointments)
        {
            model.addRow(new Object[]{a,a.getPatient_id(), a.getPatient_name(), a.getDoctor_name(), a.getDepartment(), a.getAppointmentDate(), a.getAppointmentTime()});
        }
        jTableAppointment.setModel(model);

    }
}
