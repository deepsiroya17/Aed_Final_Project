/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.CustomerSupport.CustomerSupportAdminWorkArea;



import MainCentralisationSystem.MedicalServiceCentralisationEcoSystem;

import CustomerSupportTeam.CustomerSupportMember.CustomerSupportMemberDirectory;
import CustomerSupportTeam.CustomerSupportMember.CustomerSupportMember;
import CustomerSupportTeam.CustomerSupportTeam;


import MainCentralisationSystem.Role.CustomerSupportMemberRole;
import MainCentralisationSystem.Role.FrontDeskOperatorRole;
import MainCentralisationSystem.Role.Role;

import MainCentralisationSystem.UserAccount;
import MainCentralisationSystem.UserAccountDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sarth
 */
public class CustomerSupportTeamAdminWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OperationalAccountsPage
     */
    JPanel userProcessContainer;
    MedicalServiceCentralisationEcoSystem medicalServiceCentralisationEcoSystem;
    CustomerSupportMemberDirectory customerSupportMemberDirectory;
    
    UserAccount userAccount;
    UserAccount userAccountLogin;
    UserAccountDirectory UserAccountDirectory;
    CustomerSupportTeam customerSupportTeam;
    public CustomerSupportTeamAdminWorkAreaJPanel(JPanel userProcessContainer , MedicalServiceCentralisationEcoSystem medicalServiceCentralisationEcoSystem, CustomerSupportTeam customerSupportTeam, UserAccount userAccountLogin) {
        
        this.userProcessContainer = userProcessContainer;
        this.medicalServiceCentralisationEcoSystem = medicalServiceCentralisationEcoSystem;
        this.customerSupportTeam = customerSupportTeam;
        this.userAccountLogin = userAccountLogin;
        initComponents();
        if(customerSupportTeam.getCustomerSupportMemberDirectory()== null)
           customerSupportTeam.setCustomerSupportMemberDirectory(new CustomerSupportMemberDirectory());
//        addDefaultValues(userAccountLogin);
        addrecordstotable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmployee = new javax.swing.JTable();
        jButtonCreate = new javax.swing.JButton();
        jTextFieldEmpName = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jLabelPassword = new javax.swing.JLabel();
        jTextFieldPassword = new javax.swing.JTextField();
        jTextFieldEmpID = new javax.swing.JTextField();
        jLabelEmpID = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jLabelEmpName = new javax.swing.JLabel();
        jButtonRefresh = new javax.swing.JButton();
        bgdimg = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 56)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Customer Support Members");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 710, 90));

        jTableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Employee ID", "Employee Name", "Password"
            }
        ));
        jTableEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmployeeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmployee);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 510, 630, 130));

        jButtonCreate.setBackground(new java.awt.Color(0, 102, 102));
        jButtonCreate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonCreate.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreate.setText("CREATE");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });
        add(jButtonCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 420, 100, 40));
        add(jTextFieldEmpName, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 260, 350, 30));

        jButtonUpdate.setBackground(new java.awt.Color(0, 102, 102));
        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonUpdate.setForeground(new java.awt.Color(255, 255, 255));
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });
        add(jButtonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 420, 100, 40));

        jLabelPassword.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabelPassword.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelPassword.setText("Password:");
        add(jLabelPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 100, 30));

        jTextFieldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPasswordActionPerformed(evt);
            }
        });
        add(jTextFieldPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, 350, 30));

        jTextFieldEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEmpIDActionPerformed(evt);
            }
        });
        add(jTextFieldEmpID, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 350, 30));

        jLabelEmpID.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabelEmpID.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelEmpID.setText("Employee ID:");
        add(jLabelEmpID, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 104, 30));

        jButtonDelete.setBackground(new java.awt.Color(0, 102, 102));
        jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonDelete.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        add(jButtonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 420, 100, 40));

        jLabelEmpName.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabelEmpName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelEmpName.setText("Employee Name:");
        add(jLabelEmpName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 120, 30));

        jButtonRefresh.setBackground(new java.awt.Color(0, 102, 102));
        jButtonRefresh.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonRefresh.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRefresh.setText("REFRESH");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });
        add(jButtonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 420, 100, 40));

        bgdimg.setBackground(new java.awt.Color(204, 204, 255));
        bgdimg.setForeground(new java.awt.Color(204, 204, 255));
        add(bgdimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, -90, 1030, 970));
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPasswordActionPerformed

    private void jTextFieldEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldEmpIDActionPerformed

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        ArrayList<String> user_input = check_empty_field();
        UserAccountDirectory usersList = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        if(usersList.checkIfUserIsUnique(user_input.get(0))){
            
            userAccount = new UserAccount(user_input.get(0), user_input.get(2),new CustomerSupportMemberRole());
            usersList.addUserAccount(userAccount);
            CustomerSupportMember customerSupportMember = new CustomerSupportMember();
            customerSupportMember.setCustomerSupportMemberId(user_input.get(0));
            customerSupportMember.setCustomerSupportMemberName(user_input.get(1));  
            customerSupportMemberDirectory.addCustomerSupportMember(user_input.get(0), customerSupportMember);
            customerSupportTeam.setCustomerSupportMemberDirectory(customerSupportMemberDirectory);
            userAccount.setCustomerSupportTeam(customerSupportTeam);
            
            
            JOptionPane.showMessageDialog(this, "New Employee Information has been added.");
            model.addRow(new Object[]{userAccount,user_input.get(1),user_input.get(2)});
            clearFields();
        }
        else{
            JOptionPane.showMessageDialog(this, "This username is not available. Please select a new one.");
        }
    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        int selected_row_ix = jTableEmployee.getSelectedRow();

        if(selected_row_ix < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        UserAccount select_account_details = (UserAccount)model.getValueAt(selected_row_ix, 0);        
        UserAccountDirectory = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        ArrayList<UserAccount> userAccountList = UserAccountDirectory.getUserAccountList();
        for(UserAccount userAccount: userAccountList)
        {
            if(userAccount.getUsername().equals(select_account_details.getUsername()))
            {
                CustomerSupportTeam customerSupportTeam = userAccount.getCustomerSupportTeam();
                ArrayList<String> user_input = check_empty_field();
                model.setValueAt(user_input.get(1), selected_row_ix, 1);
                model.setValueAt(user_input.get(2), selected_row_ix, 2);
                UserAccountDirectory.updateAccount(set_user_input_values(userAccount, user_input));
                break;
            }
        }   
        
//        medicalServiceCentralisationEcoSystem.setRestaurantDirectory(restaurantDirectory);
        JOptionPane.showMessageDialog(this, "Values updated");
//        addrecordstotable();
        
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int selected_row_ix = jTableEmployee.getSelectedRow();

        if(selected_row_ix < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        UserAccount select_user_account_details = (UserAccount)model.getValueAt(selected_row_ix, 0);
        UserAccountDirectory = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        UserAccountDirectory.deleteAccount(select_user_account_details);
//        ecosystem.setRestaurantDirectory(restaurantDirectory);
        model.removeRow(selected_row_ix);
        addrecordstotable();
        clearFields();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTableEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmployeeMouseClicked
        // TODO add your handling code here:
        jButtonCreate.setEnabled(false);
        int selected_row_ix = jTableEmployee.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        UserAccount select_user_account_details = (UserAccount)model.getValueAt(selected_row_ix, 0);
        jTextFieldEmpID.setEditable(false);
        jTextFieldEmpID.setText(select_user_account_details.getUsername());
        
        Role role = select_user_account_details.getRole();
        System.out.println("role.toString(): "+role.toString());
        
        
        if(role.toString().equals("CustomerSupportMember")){
            CustomerSupportTeam customerSupportTeam = select_user_account_details.getCustomerSupportTeam();
            customerSupportMemberDirectory = customerSupportTeam.getCustomerSupportMemberDirectory();
            HashMap<String, CustomerSupportMember> accountantList = customerSupportMemberDirectory.getCustomerSupportMemberList();
            CustomerSupportMember accountant = accountantList.get(select_user_account_details.getUsername());
            jTextFieldEmpName.setText(accountant.getCustomerSupportMemberName());
        }
        
        jTextFieldPassword.setText(select_user_account_details.getPassword());
        
    }//GEN-LAST:event_jTableEmployeeMouseClicked

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        jTextFieldEmpID.setEditable(true);
        jButtonCreate.setEnabled(true);
        clearFields();
    }//GEN-LAST:event_jButtonRefreshActionPerformed
    private UserAccount set_user_input_values(UserAccount userAccount, ArrayList<String> user_input) {
//        userAccount.getEmployee().setEmployee_id(user_input.get(0));
//        userAccount.getEmployee().setEmployee_name(user_input.get(1));
        userAccount.setPassword(user_input.get(2));
        return userAccount;
    }
    private void clearFields(){
        jTextFieldEmpID.setText("");
        jTextFieldEmpName.setText("");
        jTextFieldPassword.setText("");
    }
    
    public ArrayList<String> check_empty_field(){
        ArrayList<String> user_input = new ArrayList<>();
        String user_emp_id = jTextFieldEmpID.getText();
        String user_emp_name = jTextFieldEmpName.getText();
        String user_password = jTextFieldPassword.getText();

        
        if(user_emp_id.isEmpty()){
            JOptionPane.showMessageDialog(this, "User ID can't be left empty.");
        }
        else if(user_emp_name.isEmpty()){
            JOptionPane.showMessageDialog(this, "User Name can't be left empty.");
        }
        else if(user_password.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a Password.");
        }
        
        
        user_input.add(user_emp_id);
        user_input.add(user_emp_name);
        user_input.add(user_password);
        
        return user_input;
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgdimg;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelEmpID;
    private javax.swing.JLabel jLabelEmpName;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmployee;
    private javax.swing.JTextField jTextFieldEmpID;
    private javax.swing.JTextField jTextFieldEmpName;
    private javax.swing.JTextField jTextFieldPassword;
    // End of variables declaration//GEN-END:variables
    private void addUserAccount(String user_name, String password, String name, CustomerSupportMemberDirectory customerSupportMemberDirectory, CustomerSupportTeam customerSupportTeam){
        UserAccountDirectory usersList = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        userAccount = new UserAccount(user_name, password,new CustomerSupportMemberRole());
        usersList.addUserAccount(userAccount);
        CustomerSupportMember customerSupportMember = new CustomerSupportMember();
        customerSupportMember.setCustomerSupportMemberId(user_name);
        customerSupportMember.setCustomerSupportMemberName(name);  
        customerSupportMemberDirectory.addCustomerSupportMember(user_name, customerSupportMember);
        customerSupportTeam.setCustomerSupportMemberDirectory(customerSupportMemberDirectory);
        userAccount.setCustomerSupportTeam(customerSupportTeam);
    }
    private void addDefaultValues(UserAccount userAccountLogin, CustomerSupportMemberDirectory customerSupportMemberDirectory, CustomerSupportTeam customerSupportTeam){
        
        UserAccountDirectory userAccountDirectory = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        ArrayList<UserAccount> usersList = userAccountDirectory.getUserAccountList();
        System.out.println("userAccountLogin.getUsername(): "+userAccountLogin.getUsername());
        if(userAccountLogin.getUsername().equals("custsupp121")){
            if(userAccountDirectory.checkIfUserIsUnique("custsupp1"))
                addUserAccount("custsupp1","pass","custsuppname1", customerSupportMemberDirectory, customerSupportTeam);
            if(userAccountDirectory.checkIfUserIsUnique("custsupp2"))
                addUserAccount("custsupp2","pass","custsuppname2", customerSupportMemberDirectory, customerSupportTeam);
            
        }
    }

    private void addrecordstotable() {
        customerSupportMemberDirectory = customerSupportTeam.getCustomerSupportMemberDirectory();
        addDefaultValues(userAccountLogin, customerSupportMemberDirectory, customerSupportTeam);
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        model.setRowCount(0);

        UserAccountDirectory userAccountDirectory = medicalServiceCentralisationEcoSystem.getUserAccountDirectory();
        ArrayList<UserAccount> usersList = userAccountDirectory.getUserAccountList();
        
        model.setRowCount(0);
        for(UserAccount userAccount: usersList)
        {   
            System.out.println("userAccount.getRole().toString(): "+userAccount.getRole().toString());
            if(userAccount.getRole().toString() == "CustomerSupportMember" && userAccount.getCustomerSupportTeam().equals(customerSupportTeam)){
                
                customerSupportMemberDirectory = customerSupportTeam.getCustomerSupportMemberDirectory();
                HashMap<String, CustomerSupportMember> accountantList = customerSupportMemberDirectory.getCustomerSupportMemberList();
                CustomerSupportMember accountant = accountantList.get(userAccount.getUsername());
                model.addRow(new Object[]{userAccount,accountant.getCustomerSupportMemberName(),userAccount.getPassword()});
            }
        }
        
        jTableEmployee.setModel(model);
    }
    
    
}
